package plantsvszombies;

import edu.macalester.graphics.*;

import java.util.Random;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;

import zombies.ZombieManager;

/**
 * The game of Plants. vs Zombies, programmed in Java.
 * 
 * Authors: Bryant Juarez, Luna Muñoz-Maldonado, William Acosta
 * Macalester College, COMP 127, Prof. Amin G. Alhashim, PhD, 6σ
 */
public class PvZ {
    public static final int CANVAS_WIDTH = 320;
    public static final int CANVAS_HEIGHT = 240;

    private static CanvasWindow canvas = new CanvasWindow("Plants vs. Zombies: Java Edition", CANVAS_WIDTH, CANVAS_HEIGHT);;

    private static int timeInSeconds = 0;

    // Game elements
    private UI ui = new UI(canvas);
    private ZombieManager zombieManager;
    private Lawn lawn;
    private Image background = new Image("game/LAWN.png");
    private Sun sun;

    // Player Statistics
    private static String playerName = "Player";
    static int sunCount = 0;
    private static int zombiesKilled = 0;
    private final short maxSun = 9999;
    Random random = new Random();
    
    ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);

    public PvZ() {
        canvas.add(background);
        lawn = new Lawn(canvas);
        sun = null; // No suns when constructed
        zombieManager = new ZombieManager(canvas);
        canvas.add(ui);
        loadSeedPackets();

        // Gets called every second
        Runnable pvzRunnable = () -> {
            timeInSeconds++;
            zombieManager.runScheduledTasks();
            spawnSun();
        };
            
        ScheduledFuture<?> mainScheduledFuture = executor.scheduleAtFixedRate(pvzRunnable, 0, 1, TimeUnit.SECONDS);

        /*
         * Determines what element is under the mouse when a click
         * occurs, and runs that element's task for clicks accordingly.
         */
        canvas.onClick(handler -> {
            GraphicsObject clickedObject = canvas.getElementAt(handler.getPosition());

            // Elements to test for
            Image sunImage = new Image("game/SUN.png");

            if (clickedObject.equals(sunImage)) {
                sun.click();
                // Only one sun generated by the game can be on the canvas
                sun = null;
                ui.update();
            }
        });

        /*
         * Determines what element is under the mouse when a drag
         * occurs, and runs that element's task for drag events accordingly.
         */

        // TODO: Started work on deteting drag events, but the shovel is moving
        // erratically. Fix this and implement shovel features once they're ready
        canvas.onDrag(handler -> {
            GraphicsObject clickedObject = canvas.getElementAt(handler.getPosition());


            if (clickedObject == UI.shovelSprite) {
                UI.shovelSprite.setPosition(handler.getPosition());
            }
        });
    }

    public static void main(String[] args) {
        PvZ plantsVsZombies = new PvZ();
    }

    /**
     * Returns the elapsed program time, in seconds.
     * @return
     */
    public static int getTime() {
        return timeInSeconds;
    }

    /**
     * Gets the player's name.
     * @return
     */
    public static String getPlayerName() {
        return playerName;
    }

    /**
     * If all conditions are right, spawns a sun.
     */
    private void spawnSun() {
        // Check if there is not a sun generated by the game on the canvas.
        if (sun == null) {
            if ((timeInSeconds % 30) == 0) {
                Point point = new Point(random.nextInt((PvZ.CANVAS_WIDTH - 0) + 1), -10);
                sun = new Sun(point, true);
                canvas.add(sun);
            }
        }
    }

    /**
     * Loads the seed packets displaying each plant.
     */
    private void loadSeedPackets() {  
        for (int n = 0; n <= 4; n++) {
            SeedPacket seedPacket = new SeedPacket(canvas, n);
            int x = (int) (64 + (seedPacket.getWidth() * n));
            seedPacket.setPosition(x ,0);
            seedPacket.addToCanvas();
        }      
    }
}
