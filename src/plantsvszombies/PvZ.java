package plantsvszombies;

import edu.macalester.graphics.*;
import plant.*;

import java.awt.Window;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;

import javax.swing.JOptionPane;

import zombies.NormalZombie;
import zombies.ZombieManager;

/**
 * The game of Plants. vs Zombies, programmed in Java.
 * 
 * Authors: Bryant Juarez, Luna Muñoz-Maldonado, William Acosta
 * Macalester College, COMP 127, Prof. Amin G. Alhashim, PhD, 6σ
 */
public class PvZ {
    public static final int CANVAS_WIDTH = 320;
    public static final int CANVAS_HEIGHT = 240;

    private static CanvasWindow canvas = new CanvasWindow("Plants vs. Zombies: Java Edition", CANVAS_WIDTH, CANVAS_HEIGHT);;

    public static int time = 0;

    // Game elements
    private UI ui = new UI(canvas);
    private ZombieManager zombieManager;
    private Lawn lawn;
    private Image background = new Image("game/LAWN.png");
    private Sun sun;
    private static List<Plant> plantList = new ArrayList<Plant>();


    // Player Statistics
    private static String playerName;
    public static int sunCount = 9999;
    private static int zombiesKilled = 0;
    private final short maxSun = 9999;
    Random random = new Random();
    
    ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);

    public PvZ() {
        canvas.add(background);
        lawn = new Lawn(canvas);
        sun = null; // No suns when constructed
        zombieManager = new ZombieManager(canvas);
        //loadSeedPackets();
        canvas.add(ui);


        // Gets called every millisecond
        Runnable pvzRunnable = () -> {
            time++;
            zombieManager.runScheduledTasks();
            spawnSun();
            sun.runScheduledTasks();
            runScheduledPlantTasks();
        };
            
        ScheduledFuture<?> mainScheduledFuture = executor.scheduleAtFixedRate(pvzRunnable, 0, 1, TimeUnit.MILLISECONDS);

        /*
         * Determines what element is under the mouse when a click
         * occurs, and runs that element's task for clicks accordingly.
         */
        canvas.onClick(handler -> {
            GraphicsObject clickedObject = canvas.getElementAt(handler.getPosition());

            // Conditions for when buttons/suns/shovels/whatever is clicked
            // TODO: better docs
            if (clickedObject.equals(Sun.sunSprite)) {
                sun.click();
                // Only one sun generated by the game can be on the canvas
                sun = null;
                ui.update();
            }
            
            if (UI.objInMotion == false) {
                if (clickedObject.equals(UI.shovelSprite) || UI.seedPackets.contains(clickedObject)) {
                    UI.followMouse(clickedObject, true);
                }
            } else {
                UI.centerButtons();
                UI.objInMotion = false;

                if (clickedObject.equals(UI.sunflowerPacket)) {
                    if (sunCount >= Sunflower.SUN_COST) {
                        Sunflower sunflower = new Sunflower(canvas, Lawn.getPlantPoint(handler.getPosition()));
                        plantList.add(sunflower);
                        
                    }
                    
                } else if (clickedObject.equals(UI.peashooterPacket)) {
                    if (sunCount >= Peashooter.SUN_COST) {
                        Peashooter peashooter = new Peashooter(canvas, Lawn.getPlantPoint(handler.getPosition()));
                        plantList.add(peashooter);
                        
                    }
                } else if (clickedObject.equals(UI.wallnutPacket)) {
                    if (sunCount >= Wallnut.SUN_COST) {
                        Wallnut wallnut = new Wallnut(canvas, Lawn.getPlantPoint(handler.getPosition()));
                        plantList.add(wallnut);
                    }
                } else if (clickedObject.equals(UI.potatoMinePacket)) {
                    if (sunCount >= PotatoMine.SUN_COST) {
                        PotatoMine potatoMine = new PotatoMine(canvas, Lawn.getPlantPoint(handler.getPosition()), true);
                        plantList.add(potatoMine);
                    }
                } else if (clickedObject.equals(UI.cherryBombPacket)) {
                    if (sunCount >= CherryBomb.SUN_COST) {
                        CherryBomb cherryBomb = new CherryBomb(canvas, Lawn.getPlantPoint(handler.getPosition()));
                        plantList.add(cherryBomb);
                    }
                }
            }
            UI.update();
        });
    }

    public static void main(String[] args) {
        playerName = JOptionPane.showInputDialog("What is your name?");
        PvZ plantsVsZombies = new PvZ();
    }

    /**
     * Returns the elapsed program time, in seconds.
     * @return
     */
    public static int getTime() {
        return time;
    }

    /**
     * Gets the player's name.
     * @return
     */
    public static String getPlayerName() {
        return playerName;
    }

    /**
     * If all conditions are right, spawns a sun.
     */
    private void spawnSun() {
        // Check if there is not a sun generated by the game on the canvas.
        if (sun == null) {
            if ((time % 1) == 0) {
                Point point = new Point(random.nextInt((PvZ.CANVAS_WIDTH - 0) + 1), -10);
                sun = new Sun(point, true);
                canvas.add(sun);
            }
        }
    }

    private void runScheduledPlantTasks() {
        for (Plant plant : plantList) plant.runScheduledTasks();
    }

    // /**
    //  * Loads the seed packets displaying each plant.
    //  */
    // private void loadSeedPackets() {  
    //     for (int n = 0; n <= 4; n++) {
    //         SeedPacket seedPacket = new SeedPacket(canvas, n);
    //         int x = (int) (64 + (seedPacket.getWidth() * n));
    //         seedPacket.setPosition(x ,0);
    //         seedPacket.addToCanvas();
    //     }
    // }
}
